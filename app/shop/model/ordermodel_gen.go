// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"looklook/common/globalkey"
	"looklook/common/xerr"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheZwzmicroShopOrderIdPrefix = "cache:zwzmicroShop:order:id:"
)

type (
	orderModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Order) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Order, error)
		Update(ctx context.Context, session sqlx.Session, data *Order) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Order) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultOrderModel struct {
		sqlc.CachedConn
		table string
	}

	Order struct {
		Id          int64          `db:"id"`
		UserId      sql.NullInt64  `db:"user_id"`
		ProductId   sql.NullInt64  `db:"product_id"`
		OrderStatus sql.NullString `db:"order_status"`
		CreateTime  time.Time      `db:"create_time"`
		UpdateTime  time.Time      `db:"update_time"`
		DeleteTime  time.Time      `db:"delete_time"`
		DelState    int64          `db:"del_state"`
		Version     int64          `db:"version"`
	}
)

func newOrderModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOrderModel {
	return &defaultOrderModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`order`",
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, session sqlx.Session, data *Order) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	zwzmicroShopOrderIdKey := fmt.Sprintf("%s%v", cacheZwzmicroShopOrderIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.ProductId, data.OrderStatus, data.DeleteTime, data.DelState, data.Version)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.ProductId, data.OrderStatus, data.DeleteTime, data.DelState, data.Version)
	}, zwzmicroShopOrderIdKey)
}

func (m *defaultOrderModel) FindOne(ctx context.Context, id int64) (*Order, error) {
	zwzmicroShopOrderIdKey := fmt.Sprintf("%s%v", cacheZwzmicroShopOrderIdPrefix, id)
	var resp Order
	err := m.QueryRowCtx(ctx, &resp, zwzmicroShopOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", orderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Update(ctx context.Context, session sqlx.Session, data *Order) (sql.Result, error) {
	zwzmicroShopOrderIdKey := fmt.Sprintf("%s%v", cacheZwzmicroShopOrderIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.ProductId, data.OrderStatus, data.DeleteTime, data.DelState, data.Version, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.ProductId, data.OrderStatus, data.DeleteTime, data.DelState, data.Version, data.Id)
	}, zwzmicroShopOrderIdKey)
}

func (m *defaultOrderModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Order) error {

	oldVersion := data.Version
	data.Version += 1

	var sqlResult sql.Result
	var err error

	zwzmicroShopOrderIdKey := fmt.Sprintf("%s%v", cacheZwzmicroShopOrderIdPrefix, data.Id)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, orderRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.ProductId, data.OrderStatus, data.DeleteTime, data.DelState, data.Version, data.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.ProductId, data.OrderStatus, data.DeleteTime, data.DelState, data.Version, data.Id, oldVersion)
	}, zwzmicroShopOrderIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return xerr.NewErrCode(xerr.DB_UPDATE_AFFECTED_ZERO_ERROR)
	}

	return nil
}

func (m *defaultOrderModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	zwzmicroShopOrderIdKey := fmt.Sprintf("%s%v", cacheZwzmicroShopOrderIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, zwzmicroShopOrderIdKey)
	return err
}

func (m *defaultOrderModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheZwzmicroShopOrderIdPrefix, primary)
}
func (m *defaultOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", orderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultOrderModel) tableName() string {
	return m.table
}
